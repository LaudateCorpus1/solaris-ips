#!/usr/bin/python3.7 -Es
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright (c) 2019, 2021, Oracle and/or its affiliates.
#

import pkg.no_site_packages
import os
import sys
import subprocess
import pkg.smf
from pkg.smf import get_prop
import smf_include as smf
import json

SMF_FMRI = os.getenv('SMF_FMRI')
PARSABLE_OUTPUT = '/system/volatile/' + SMF_FMRI + '/parsable_output.json'

auto_reboot = (get_prop(SMF_FMRI, 'config/auto-reboot') == 'true')
if auto_reboot:
    try:
        reboot_check_hook = get_prop(SMF_FMRI, 'config/reboot-check-hook')
        check_before_reboot = os.access(reboot_check_hook, os.X_OK)
    except pkg.smf.NonzeroExitException:
        check_before_reboot = False

cmd = ['/usr/bin/pkg']

try:
    packages = get_prop(SMF_FMRI, 'config/packages').split(' ')
    # The property may have been set to the empty string.
    if len(packages) == 1 and (len(packages[0]) == 0 or packages[0] == '""'):
        packages = []
except pkg.smf.NonzeroExitException:
    packages = []

# If we have a list of packages use 'pkg install' so that this can be
# used to change the installed set.  If packages is empty then perform
# an unconstrained update.
if len(packages) > 0:
    cmd.extend(['install'])
else:
    cmd.extend(['update'])

if get_prop(SMF_FMRI, 'config/require-new-be') == 'true':
    cmd.append('--require-new-be')

if get_prop(SMF_FMRI, 'config/activate-new-be') == 'false':
    if auto_reboot:
        smf_method_exit(smf.SMF_EXIT_ERR_CONFIG,
                        'invalid configuration',
                        'Invalid configuration: config/auto-reboot = true '
                        'with config/activate-new-be = false')
    cmd.append('--no-be-activate')

# Add any extra args that should be passed to pkg, eg for verbose output
# for zones related arguments.
try:
    extra_args = get_prop(SMF_FMRI, 'config/pkg_extra_args').split(' ')
except pkg.smf.NonzeroExitException:
    pass
else:
    cmd.extend(extra_args)

# Finally add the list of packages if it is non empty.
if len(packages) > 0:
    cmd.extend(packages)

# To help debugging print out the full command what we are actually running
print('Running:', ' '.join(cmd))
pkg_status = subprocess.call(cmd)

if pkg_status == 4:    # Nothing to do so exit cleanly.
    sys.exit(smf.SMF_EXIT_OK)
elif pkg_status != 0:
    sys.exit(smf.SMF_EXIT_ERR_FATAL)

with open(PARSABLE_OUTPUT) as pkg_out:
    pkgplan = json.loads(pkg_out.read())

new_be_created = pkgplan['create-new-be']
new_be_activated = pkgplan['activate-be']
if new_be_created and new_be_activated and auto_reboot:
    if check_before_reboot:
        print('Running reboot-check-hook {0}'.format(reboot_check_hook))
        exitcode, output = subprocess.getstatusoutput(reboot_check_hook)
        if exitcode != 0:
            print('reboot-check-hook failed')
            smf.smf_method_exit(smf.SMF_EXIT_DEGRADED,
                                'reboot-check-hook failed', output)
    print('Reboot after auto update')
    msg = SMF_FMRI + ' : automatic reboot after update'
    try:
        grace_period = get_prop(SMF_FMRI, 'config/shutdown-grace-period')
    except pkg.smf.NonzeroExitException:
        grace_period = 60
    subprocess.call(['shutdown', '-yrg', grace_period, msg])
elif not new_be_created:
    print('Auto update completed, no reboot needed')

sys.exit(smf.SMF_EXIT_OK)
